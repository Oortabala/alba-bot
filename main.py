import asyncio
import logging
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.filters import Command

API_TOKEN = "8033548959:AAEtHzV-TecfYAnpUBkkhKW8-ynnTPIk36k"  # —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
GROUP_CHAT_ID = -4905293305  # chat_id –≥—Ä—É–ø–ø—ã "–ó–∞—è–≤–∫–∏ —Å —Å–∞–π—Ç–∞"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# -------------------- SQLite --------------------
def init_db():
    conn = sqlite3.connect("orders.db")
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS orders (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        product TEXT,
        quantity TEXT,
        design TEXT,
        deadline TEXT,
        material TEXT,
        phone TEXT
    )
    """)
    conn.commit()
    conn.close()

def save_order(user_id, product, quantity, design, deadline, material, phone):
    conn = sqlite3.connect("orders.db")
    cursor = conn.cursor()
    cursor.execute("""
    INSERT INTO orders (user_id, product, quantity, design, deadline, material, phone)
    VALUES (?, ?, ?, ?, ?, ?, ?)
    """, (user_id, product, quantity, design, deadline, material, phone))
    conn.commit()
    conn.close()

# -------------------- –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ --------------------
user_data = {}

# -------------------- –•—ç–Ω–¥–ª–µ—Ä—ã --------------------
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –∑–∞—è–≤–∫—É")]],
        resize_keyboard=True
    )
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–µ—á–∞—Ç—å –∑–∞ 1 –º–∏–Ω—É—Ç—É.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∏ –º—ã –≤—Å—ë –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–ª—è –≤–∞—Å.\n‚¨áÔ∏è –ù–∞—á–Ω–µ–º?",
        reply_markup=kb
    )

# –í–æ–ø—Ä–æ—Å 1
@dp.message(F.text == "üöÄ –ù–∞—á–∞—Ç—å –∑–∞—è–≤–∫—É")
async def question_1(message: types.Message):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìò –ë—É–∫–ª–µ—Ç—ã"), KeyboardButton(text="üìñ –ñ—É—Ä–Ω–∞–ª—ã")],
            [KeyboardButton(text="üìú –õ–∏—Ñ–ª–µ—Ç—ã"), KeyboardButton(text="üéØ –§–ª–∞–µ—Ä—ã")],
            [KeyboardButton(text="üì¢ –ë–∞–Ω–Ω–µ—Ä—ã"), KeyboardButton(text="‚úçÔ∏è –î—Ä—É–≥–æ–µ")]
        ],
        resize_keyboard=True
    )
    await message.answer("–ß—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ –∏–∑–≥–æ—Ç–æ–≤–∏—Ç—å? –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ üëá", reply_markup=kb)

# –í–æ–ø—Ä–æ—Å 2
@dp.message(F.text.in_(["üìò –ë—É–∫–ª–µ—Ç—ã", "üìñ –ñ—É—Ä–Ω–∞–ª—ã", "üìú –õ–∏—Ñ–ª–µ—Ç—ã", "üéØ –§–ª–∞–µ—Ä—ã", "üì¢ –ë–∞–Ω–Ω–µ—Ä—ã", "‚úçÔ∏è –î—Ä—É–≥–æ–µ"]))
async def question_2(message: types.Message):
    user_data[message.from_user.id] = {"product": message.text}
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîπ –î–æ 500"), KeyboardButton(text="üîπ 500‚Äì2000")],
            [KeyboardButton(text="üîπ 2000+"), KeyboardButton(text="‚úçÔ∏è –î—Ä—É–≥–æ–µ")]
        ],
        resize_keyboard=True
    )
    await message.answer("–ö–∞–∫–æ–π –æ–±—â–∏–π —Ç–∏—Ä–∞–∂ –≤–∞–º –Ω—É–∂–µ–Ω? (–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ)", reply_markup=kb)

# –í–æ–ø—Ä–æ—Å 3
@dp.message((F.text.startswith("üîπ")) | (F.text == "‚úçÔ∏è –î—Ä—É–≥–æ–µ"))
async def question_3(message: types.Message):
    user_data.setdefault(message.from_user.id, {})["quantity"] = message.text
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç"), KeyboardButton(text="üé® –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )
    await message.answer("–£ –≤–∞—Å –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–π –¥–∏–∑–∞–π–Ω –º–∞–∫–µ—Ç–∞?", reply_markup=kb)

# –í–æ–ø—Ä–æ—Å 4
@dp.message(F.text.in_(["‚úÖ –î–∞", "‚ùå –ù–µ—Ç", "üé® –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å"]))
async def question_4(message: types.Message):
    user_data.setdefault(message.from_user.id, {})["design"] = message.text
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ö° –°—Ä–æ—á–Ω–æ (1‚Äì2 –¥–Ω—è)"), KeyboardButton(text="üìÜ –î–æ –Ω–µ–¥–µ–ª–∏")],
            [KeyboardButton(text="‚è≥ –ë–æ–ª–µ–µ –Ω–µ–¥–µ–ª–∏"), KeyboardButton(text="‚úçÔ∏è –î—Ä—É–≥–æ–µ")]
        ],
        resize_keyboard=True
    )
    await message.answer("–ö–∞–∫–∏–µ —Å—Ä–æ–∫–∏ –¥–ª—è –≤–∞—Å —É–¥–æ–±–Ω—ã?", reply_markup=kb)

# –í–æ–ø—Ä–æ—Å 5
@dp.message(F.text.in_(["‚ö° –°—Ä–æ—á–Ω–æ (1‚Äì2 –¥–Ω—è)", "üìÜ –î–æ –Ω–µ–¥–µ–ª–∏", "‚è≥ –ë–æ–ª–µ–µ –Ω–µ–¥–µ–ª–∏", "‚úçÔ∏è –î—Ä—É–≥–æ–µ"]))
async def question_5(message: types.Message):
    user_data.setdefault(message.from_user.id, {})["deadline"] = message.text
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìÑ –û–±—ã—á–Ω–∞—è –±—É–º–∞–≥–∞"), KeyboardButton(text="üìë –ü–ª–æ—Ç–Ω–∞—è –±—É–º–∞–≥–∞")],
            [KeyboardButton(text="üèû –ë–∞–Ω–Ω–µ—Ä–Ω–∞—è —Ç–∫–∞–Ω—å"), KeyboardButton(text="üè∑ –°–∞–º–æ–∫–ª–µ—è—â–∞—è—Å—è –ø–ª–µ–Ω–∫–∞")],
            [KeyboardButton(text="‚úçÔ∏è –î—Ä—É–≥–æ–µ")]
        ],
        resize_keyboard=True
    )
    await message.answer("–ö–∞–∫–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª–µ–Ω?", reply_markup=kb)

# –í–æ–ø—Ä–æ—Å 6
@dp.message(F.text.in_(["üìÑ –û–±—ã—á–Ω–∞—è –±—É–º–∞–≥–∞", "üìë –ü–ª–æ—Ç–Ω–∞—è –±—É–º–∞–≥–∞", "üèû –ë–∞–Ω–Ω–µ—Ä–Ω–∞—è —Ç–∫–∞–Ω—å", "üè∑ –°–∞–º–æ–∫–ª–µ—è—â–∞—è—Å—è –ø–ª–µ–Ω–∫–∞", "‚úçÔ∏è –î—Ä—É–≥–æ–µ"]))
async def question_6(message: types.Message):
    user_data.setdefault(message.from_user.id, {})["material"] = message.text
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", request_contact=True)]],
        resize_keyboard=True
    )
    await message.answer(
        "–û—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –±—ã—Å—Ç—Ä–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.",
        reply_markup=kb
    )

# –§–∏–Ω–∞–ª
@dp.message(F.contact)
async def finish(message: types.Message):
    user_id = message.from_user.id
    phone = message.contact.phone_number
    data = user_data.get(user_id, {})

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    save_order(
        user_id,
        data.get("product"),
        data.get("quantity"),
        data.get("design"),
        data.get("deadline"),
        data.get("material"),
        phone
    )

    # –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.\n\n"
        "–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
        "‚ú® –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –≤—Ä–µ–º—è ‚Äî —Ä–∞—Å—á—ë—Ç –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ!",
        reply_markup=ReplyKeyboardRemove()
    )

    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
    order_text = (
        f"üì© –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
        f"üë§ User ID: {user_id}\n"
        f"üìò –ü—Ä–æ–¥—É–∫—Ç: {data.get('product')}\n"
        f"üì¶ –¢–∏—Ä–∞–∂: {data.get('quantity')}\n"
        f"üé® –î–∏–∑–∞–π–Ω: {data.get('design')}\n"
        f"‚è≥ –°—Ä–æ–∫–∏: {data.get('deadline')}\n"
        f"üìë –ú–∞—Ç–µ—Ä–∏–∞–ª: {data.get('material')}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_{user_id}")],
        [InlineKeyboardButton(text="‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É", url=f"tg://user?id={user_id}")],
        [InlineKeyboardButton(text="üì¶ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"done_{user_id}")]
    ])

    await bot.send_message(GROUP_CHAT_ID, order_text, reply_markup=kb)

# -------------------- Callback-—Ö—ç–Ω–¥–ª–µ—Ä—ã --------------------
# –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É
@dp.callback_query(F.data.startswith("take_"))
async def take_order(callback: types.CallbackQuery):
    manager = callback.from_user.full_name
    user_id = int(callback.data.split("_")[1])

    # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
    text = callback.message.text + f"\n\nüõ† –í —Ä–∞–±–æ—Ç–µ: {manager}"
    new_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É", url=f"tg://user?id={user_id}")],
        [InlineKeyboardButton(text="üì¶ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"done_{user_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"decline_{user_id}")]
    ])
    await callback.message.edit_text(text, reply_markup=new_kb)
    await callback.answer("–¢—ã –≤–∑—è–ª –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É ‚úÖ")

    # —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    try:
        await bot.send_message(user_id, f"üõ† –í–∞—à –∑–∞–∫–∞–∑ –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä {manager}")
    except:
        pass  # –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã–ª –õ–°

# –ó–∞–≤–µ—Ä—à–∏—Ç—å
@dp.callback_query(F.data.startswith("done_"))
async def done_order(callback: types.CallbackQuery):
    manager = callback.from_user.full_name
    user_id = int(callback.data.split("_")[1])

    text = callback.message.text + f"\n\n‚úÖ –ó–∞–≤–µ—Ä—à–∏–ª: {manager}"
    await callback.message.edit_text(text)
    await callback.answer("–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à—ë–Ω ‚úÖ")

    # —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    try:
        await bot.send_message(user_id, f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à—ë–Ω\n–ú–µ–Ω–µ–¥–∂–µ—Ä: {manager}")
    except:
        pass

# –û—Ç–∫–ª–æ–Ω–∏—Ç—å
@dp.callback_query(F.data.startswith("decline_"))
async def decline_order(callback: types.CallbackQuery):
    manager = callback.from_user.full_name
    user_id = int(callback.data.split("_")[1])

    text = callback.message.text + f"\n\n‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω: {manager}"
    await callback.message.edit_text(text)
    await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω ‚ùå")

    # —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    try:
        await bot.send_message(user_id, f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω\n–ú–µ–Ω–µ–¥–∂–µ—Ä: {manager}")
    except:
        pass

# -------------------- main --------------------
async def main():
    init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
